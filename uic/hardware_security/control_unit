library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity control_unit is
  port (     clk: in std_logic;
			  rst_n: in std_logic;
			  start: in std_logic;
			ctrl_in: out std_logic;
			reset_n: out std_logic;
	   enable_reg: out std_logic;
	 round_number: out std_logic_vector(3 downto 0);
		  ctrl_add: out std_logic_vector(1 downto 0);
		      done: out std_logic);
end control_unit;

architecture behavior of control_unit is
------------------------- 
-- States
-------------------------
  type state is (reset_s, idle_s, load_s, round_s, done_s);
  signal s_state : state;
  
 ----------------------- 
 -- Loop and iterations counter
 ----------------------- 
  signal round_cnt: std_logic_vector(3 downto 0);
  signal enable_round_cnt,reset_round_cnt : std_logic;
 
begin

---------------------------------------------------------------------------------
-- Round counter
---------------------------------------------------------------------------------
round_number<=round_cnt;

count_round: process (clk, rst_n)
  begin  -- process
    if rst_n= '0' then                  -- asynchronous reset (active low)
      round_cnt <= (others=>'0');
    else
	   if (clk'event and clk = '1') then  -- rising clock edge
			if (reset_round_cnt = '1') then
				round_cnt <= (others=>'0');
			elsif (enable_round_cnt ='1') then
				round_cnt <= std_logic_vector(to_unsigned((to_integer(unsigned(round_cnt))+1),4));
			end if;
		end if;
    end if;
  end process;
  
-----------------------------------------------------------------------------
-- FSM
-----------------------------------------------------------------------------
state_transitions: process (clk, rst_n)
  begin  -- process
    if rst_n = '0' then                  -- asynchronous reset (active low)
      s_state <= reset_s;
     
    elsif (clk'event and clk = '1') then  -- rising clock edge
      case s_state is
        
        when reset_s =>
            s_state <= idle_s;

		when idle_s =>
			 if (start = '1') then
            			s_state <= load_s;
          		else
           			 s_state <= idle_s;
          		end if;

		when load_s =>
			s_state <= round_s;
        
		  when round_s =>
		      if (round_cnt="1001") then
				s_state <= done_s;
				else
				s_state <= round_s;
				end if;			
        
		  when done_s =>
			  s_state <= idle_s;
        
	--	  when others =>
   --       s_state <= idle_s;
			 
      end case;
    end if;
  end process;


output_update:process (s_state, round_cnt)
  begin 
			 reset_n <= '1'; --default outputs
			 ctrl_in <= '0'; --plaintext chosen by default
		 enable_reg <= '0';
				 done <= '0';
			ctrl_add <= "00";
  enable_round_cnt<= '0';
  reset_round_cnt <= '0';

		  
	 case s_state is   
      when reset_s =>
			reset_round_cnt <= '1';
			reset_n <= '0';
		when idle_s =>
			enable_reg <= '0';
		when load_s =>
			enable_reg <= '1';
		
		when round_s =>
			enable_round_cnt <= '1';

			if round_cnt<="0000" then
			ctrl_add <= "01"; --select the plaintext

		   elsif round_cnt <= "1001" then
			ctrl_add <= "00"; --select the shift_rows output
			ctrl_in <= '1';   --select the register input as input
			else
			ctrl_add <= "11"; --select the mix_columns output
		   ctrl_in <= '1';
			end if;
		
		when done_s =>
		    done <= '1';
		
		--when others =>
      
    end case;
  end process;

end behavior;
