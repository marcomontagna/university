 -- codifica ascii

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY codifica_ascii IS
	PORT (clk, load_dati, rst_as_n: IN STD_LOGIC;
			input_blocco: IN STD_LOGIC_VECTOR(15 DOWNTO 0);
			main_sel: IN STD_LOGIC_VECTOR(2 DOWNTO 0);
			en_cnt: IN STD_LOGIC;
			dati_uart: OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
			TC: BUFFER STD_LOGIC;
			done_codifica: OUT STD_LOGIC;
			d_g: OUT STD_LOGIC_VECTOR (1 DOWNTO 0));
END codifica_ascii;

ARCHITECTURE behavior OF codifica_ascii IS

COMPONENT DATA_REGISTER
GENERIC (N:INTEGER);
PORT(
EN_REG,CLK,RESET	: IN STD_LOGIC;	--segnale di enable, reset e clock
DATA_REG_IN	:	IN STD_LOGIC_VECTOR((N-1) DOWNTO 0);	--dato in ingresso
DATA_REG_OUT	:	OUT STD_LOGIC_VECTOR((N-1) DOWNTO 0) --dato in uscita
);
END COMPONENT;

COMPONENT COUNTER_NBIT IS
GENERIC (N:INTEGER);
PORT(
EN_COUNT, LOAD_COUNT,CLK,RESET	: IN STD_LOGIC;	--abilita conta, carica dato da cui iniziare a contare
COUNT_IN	:	IN STD_LOGIC_VECTOR((N-1) DOWNTO 0);	--dato da caricare in parallelo
COUNT_OUT	:	OUT STD_LOGIC_VECTOR((N-1) DOWNTO 0);
TC	:	OUT STD_LOGIC	--terminal count
);
END COMPONENT;

COMPONENT MUX_NBIT
	GENERIC (N:INTEGER);
	PORT(
		SEL	: IN STD_LOGIC_VECTOR(2 DOWNTO 0);	--segnale di enable, reset e clock
		DATA_1, DATA_2, DATA_3, DATA_4, DATA_5, DATA_6, DATA_7, DATA_8	:	IN STD_LOGIC_VECTOR((N-1) DOWNTO 0);	--dato in ingresso
		DATA_OUT	:	OUT STD_LOGIC_VECTOR((N-1) DOWNTO 0) --dato in uscita
	);
END COMPONENT;

TYPE state_type IS (S0_IDLE, S1_SEND1, S2_SEND2);
SIGNAL stato: state_type;
SIGNAL channel_sel, en_reg_uart, rst_sync : STD_LOGIC;
SIGNAL in_reg_uart: STD_LOGIC_VECTOR (7 DOWNTO 0);
SIGNAL out_reg_channel: STD_LOGIC_VECTOR (15 DOWNTO 0);
SIGNAL out_cnt: STD_LOGIC_VECTOR(2 DOWNTO 0);

BEGIN

-- control unit
	state_update: PROCESS (clk, rst_as_n)
	BEGIN
		IF (rst_as_n = '0') THEN
			stato <= S0_IDLE;
		ELSE
			IF (clk'EVENT AND clk = '1') THEN
				CASE stato IS
					WHEN S0_IDLE =>
						IF (main_sel ="000" OR main_sel ="001" OR main_sel ="010" OR main_sel ="011") THEN
							stato <= S1_SEND1;
						ELSIF (main_sel ="100" OR main_sel ="101") THEN
							stato <= S2_SEND2;
						ELSE
							stato <= S0_IDLE;
						END IF;
						
					WHEN S1_SEND1 =>
						IF TC ='1' THEN
							stato <= S0_IDLE;
						ELSE	
							stato <= S1_SEND1;
						END IF;
					
					WHEN S2_SEND2 =>
						stato <= S0_IDLE;
						
					WHEN OTHERS =>
						stato <= S0_IDLE;
				END CASE;
			END IF;
		END IF;
	END PROCESS;

	output_process: PROCESS (stato)
	BEGIN
		rst_sync <= '1';
		en_reg_uart <= '0';
		done_codifica <= '0';
		
		CASE stato IS
			WHEN S0_IDLE => 
				rst_sync <= '0';
			WHEN S1_SEND1 => 
				en_reg_uart <= '1';
				done_codifica <= '1';
			WHEN S2_SEND2 =>
				en_reg_uart <= '1';
				done_codifica <= '1';
				
		END CASE;
	END PROCESS;
	
-- datapath

	cnt_modulo8:COUNTER_NBIT GENERIC MAP (N=>3)
PORT MAP(en_cnt,'0',clk,rst_sync,"000",out_cnt,TC);

	reg_d_g: DATA_REGISTER GENERIC MAP(N=>16)
	PORT MAP(load_dati,clk,rst_sync,input_blocco,out_reg_channel);
	
	
	mux_channel: MUX_NBIT GENERIC MAP (N=>2)
		PORT MAP (out_cnt, out_reg_channel(15 DOWNTO 14), out_reg_channel(13 DOWNTO 12), out_reg_channel(11 DOWNTO 10), 
			out_reg_channel(9 DOWNTO 8), out_reg_channel(7 DOWNTO 6), out_reg_channel(5 DOWNTO 4), 
			out_reg_channel(3 DOWNTO 2), out_reg_channel(1 DOWNTO 0), d_g);
	mux_ascii: MUX_NBIT GENERIC MAP (N=>8)
	PORT MAP (main_sel, "00110000", "00110001", "01111000", "00001010", "01001111", "01001011",
	"00000000", "00000000", in_reg_uart);
	
	reg_uart: DATA_REGISTER GENERIC MAP(N=>8)
	PORT MAP(en_reg_uart,clk,rst_sync,in_reg_uart,dati_uart);
END behavior;
	